// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/snapshot.proto

package snapshot_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SnapshotService_StreamSnapshotRPC_FullMethodName = "/snapshot_proto.SnapshotService/StreamSnapshotRPC"
)

// SnapshotServiceClient is the client API for SnapshotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnapshotServiceClient interface {
	StreamSnapshotRPC(ctx context.Context, opts ...grpc.CallOption) (SnapshotService_StreamSnapshotRPCClient, error)
}

type snapshotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapshotServiceClient(cc grpc.ClientConnInterface) SnapshotServiceClient {
	return &snapshotServiceClient{cc}
}

func (c *snapshotServiceClient) StreamSnapshotRPC(ctx context.Context, opts ...grpc.CallOption) (SnapshotService_StreamSnapshotRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &SnapshotService_ServiceDesc.Streams[0], SnapshotService_StreamSnapshotRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &snapshotServiceStreamSnapshotRPCClient{stream}
	return x, nil
}

type SnapshotService_StreamSnapshotRPCClient interface {
	Send(*SnapshotChunk) error
	CloseAndRecv() (*SnapshotStreamResponse, error)
	grpc.ClientStream
}

type snapshotServiceStreamSnapshotRPCClient struct {
	grpc.ClientStream
}

func (x *snapshotServiceStreamSnapshotRPCClient) Send(m *SnapshotChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *snapshotServiceStreamSnapshotRPCClient) CloseAndRecv() (*SnapshotStreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SnapshotStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnapshotServiceServer is the server API for SnapshotService service.
// All implementations must embed UnimplementedSnapshotServiceServer
// for forward compatibility
type SnapshotServiceServer interface {
	StreamSnapshotRPC(SnapshotService_StreamSnapshotRPCServer) error
	mustEmbedUnimplementedSnapshotServiceServer()
}

// UnimplementedSnapshotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSnapshotServiceServer struct {
}

func (UnimplementedSnapshotServiceServer) StreamSnapshotRPC(SnapshotService_StreamSnapshotRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSnapshotRPC not implemented")
}
func (UnimplementedSnapshotServiceServer) mustEmbedUnimplementedSnapshotServiceServer() {}

// UnsafeSnapshotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapshotServiceServer will
// result in compilation errors.
type UnsafeSnapshotServiceServer interface {
	mustEmbedUnimplementedSnapshotServiceServer()
}

func RegisterSnapshotServiceServer(s grpc.ServiceRegistrar, srv SnapshotServiceServer) {
	s.RegisterService(&SnapshotService_ServiceDesc, srv)
}

func _SnapshotService_StreamSnapshotRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SnapshotServiceServer).StreamSnapshotRPC(&snapshotServiceStreamSnapshotRPCServer{stream})
}

type SnapshotService_StreamSnapshotRPCServer interface {
	SendAndClose(*SnapshotStreamResponse) error
	Recv() (*SnapshotChunk, error)
	grpc.ServerStream
}

type snapshotServiceStreamSnapshotRPCServer struct {
	grpc.ServerStream
}

func (x *snapshotServiceStreamSnapshotRPCServer) SendAndClose(m *SnapshotStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *snapshotServiceStreamSnapshotRPCServer) Recv() (*SnapshotChunk, error) {
	m := new(SnapshotChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnapshotService_ServiceDesc is the grpc.ServiceDesc for SnapshotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapshotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "snapshot_proto.SnapshotService",
	HandlerType: (*SnapshotServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSnapshotRPC",
			Handler:       _SnapshotService_StreamSnapshotRPC_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/snapshot.proto",
}
